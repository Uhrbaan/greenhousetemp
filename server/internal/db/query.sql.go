// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const selectAllMeasurements = `-- name: SelectAllMeasurements :many
SELECT timestamp, value FROM measurements
`

func (q *Queries) SelectAllMeasurements(ctx context.Context) ([]Measurement, error) {
	rows, err := q.db.QueryContext(ctx, selectAllMeasurements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Measurement
	for rows.Next() {
		var i Measurement
		if err := rows.Scan(&i.Timestamp, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectLatestMeasurement = `-- name: SelectLatestMeasurement :one
SELECT MAX(timestamp), value FROM measurements LIMIT 1
`

type SelectLatestMeasurementRow struct {
	Max   interface{}
	Value sql.NullFloat64
}

func (q *Queries) SelectLatestMeasurement(ctx context.Context) (SelectLatestMeasurementRow, error) {
	row := q.db.QueryRowContext(ctx, selectLatestMeasurement)
	var i SelectLatestMeasurementRow
	err := row.Scan(&i.Max, &i.Value)
	return i, err
}
