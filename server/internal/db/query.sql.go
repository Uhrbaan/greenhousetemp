// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const addMeasurement = `-- name: AddMeasurement :exec
INSERT INTO measurements (temperature, humidity)
VALUES (?, ?)
`

type AddMeasurementParams struct {
	Temperature float64 `json:"temperature"`
	Humidity    float64 `json:"humidity"`
}

func (q *Queries) AddMeasurement(ctx context.Context, arg AddMeasurementParams) error {
	_, err := q.db.ExecContext(ctx, addMeasurement, arg.Temperature, arg.Humidity)
	return err
}

const selectAllMeasurements = `-- name: SelectAllMeasurements :many
SELECT timestamp, temperature, humidity FROM measurements
`

func (q *Queries) SelectAllMeasurements(ctx context.Context) ([]Measurement, error) {
	rows, err := q.db.QueryContext(ctx, selectAllMeasurements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Measurement
	for rows.Next() {
		var i Measurement
		if err := rows.Scan(&i.Timestamp, &i.Temperature, &i.Humidity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectLatestMeasurement = `-- name: SelectLatestMeasurement :one
SELECT timestamp, temperature, humidity FROM measurements
ORDER BY timestamp DESC 
LIMIT 1
`

func (q *Queries) SelectLatestMeasurement(ctx context.Context) (Measurement, error) {
	row := q.db.QueryRowContext(ctx, selectLatestMeasurement)
	var i Measurement
	err := row.Scan(&i.Timestamp, &i.Temperature, &i.Humidity)
	return i, err
}
